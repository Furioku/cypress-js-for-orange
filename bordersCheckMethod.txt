checkOverlappingText() {
        cy.xpath(this.monthlyText).should('be.visible');
        cy.xpath(this.priceText).should('be.visible');
        cy.xpath(this.vatText).should('be.visible');
        /**
        * Returns true if two DOM rectangles are overlapping
        * @param {DOMRect} rect1 the bounding client rectangle of the first element
        * @param {DOMRect} rect2 the bounding client rectangle of the second element
        * @returns {boolean}
        */
        const areOverlapping = (rect1, rect2) => {
    // if one rectangle is on the left side of the other
            if (rect1.right < rect2.left || rect2.right < rect1.left) {
                return false
            };
        
            // if one rectangle is above the other
            if (rect1.bottom < rect2.top || rect2.bottom < rect1.top) {
                return false
            };
        
            // the rectangles must overlap
            return true
        };
        
        /**
         * Returns the bounding rectangle of the first DOM
         * element in the given jQuery object.
         */
        const getRectangle = ($el) => $el[0].getBoundingClientRect()
        
        // get each element and compute its bounding rectangle
        // then use the areOverlapping predicate to check
        // for overlap and assert the result
        cy.xpath(this.monthlyText)
            .then(getRectangle)
            .then((rectA) => {
            cy.xpath(this.priceText)
                .then(getRectangle)
                .then((rectB) => {
                cy.xpath(this.vatText)
                    .then(getRectangle)
                    .then((rectC) => {
                    // now check which rectangles are overlapping
                    expect(
                        areOverlapping(rectA, rectB),
                        'A and B are overlapping?',
                    ).to.be.false
                    expect(
                        areOverlapping(rectA, rectC),
                        'A and C are overlapping?',
                    ).to.be.true
                    expect(
                        areOverlapping(rectB, rectC),
                        'B and C are overlapping?',
                    ).to.be.true
                    })
                })
            })
            }